erlang-rocksdb 0.23.0, released on 2018/10/05
================================================

- add iterate_upper_bound, iterate_lower_bound_options and prefix_same_as_start to iterator options
- improve: prevernt garbage collection in batch
- fix bitset merge operator, handle excceptions
- fix counter merge operator, handle exceptions

erlang-rocksdb 0.22.0, released on 2018/09/25
================================================

- fix NIF memory leak in `erocksdb::Get`
- add counter_merge_operator

erlang-rocksdb 0.21.0, released on 2018/09/16
================================================

- bump to rocksdb 5.15.10
- add: erlang merge operator
- add: erlang bitset merge operator
- add: rocksdb:batch_data_size/1
- add: prefix_transform option

erlang-rocksdb 0.20.0, released on 2018/08/03
================================================

- bump to rocksdb 5.14.2

erlang-rocksdb 0.19.0, released on 2018/07/04
================================================

- bump to rocksdb 5.13.4
- add `rocksdb:set_strict_capacity_limit/2` for cache
- add `optimize_filters_for_hits` database option
- add `new_table_reader_for_compaction_inputs` database option
- add `max_subcompactions` database option

erlang-rocksdb 0.18.0, released on 2018/05/03
================================================

- bump to rocksdb 5.12.4

erlang-rocksdb 0.17.0, released on 2018/03/25
================================================

- bump ro rocksdb 5.11.3
- improve build to make it faster, only use makefiles
- optimise single operations Get/Put/Delete/DeleteSing: don't call batch
- optimise write: use batch and do less operations in the the nif: make scheduler happy
- fix leak in batch
- breaking change: rename `close_batch/1`  in `relase_batch/1`

erlang-rocksdb 0.16.0, released on 2018/03/13
=================================================

- add single_delete operation (to key/value and batch api)
- add iterator_refresh function
- add support for level_compaction_dynamic_level_bytes for column family options
- add rate_limiter support
- many optimisations to the source code and build
- bump to rocksdb 5.10.4

erlang-rocksdb 0.15.0, released on 2018/02/10
=================================================

- add support for lz4 compression
- add new database option `max_background_jobs`
- fix: potential memory leak

erlang-rocksdb 0.14.0, released on 2018/01/31
=================================================

- bump to rocksdb 5.7.5
- bump to snappy 1.1.4

erlang-rocksdb 0.13.1, released on 2017/09/07
=================================================

- fix: remove memory leaks spotted with valgrind

erlang-rocksdb 0.13.0, released on 2017/09/06
=================================================

* add new cache api

	-  new_lru_cache/1,
	-  new_clock_cache/1,
	-  get_usage/1,
	-  get_pinned_usage/1,
	-  set_capacity/2,
	-  get_capacity/1
	-  release_cache/1

* add new env api

	- default_env/0,
	- mem_env/0,
	- set_env_background_threads/{2, 3},
	- destroy_env/1

* remove default shared block cache in private env to reduce the vm memory usage.


erlang-rocksdb 0.12.0, released on 2017/09/05
=================================================


- add get_block_cache_usage/1
- add block_cache_capacity/{1, 0}
- add new db option {env, Env} where Env can be `default` or `memenv`.
- add new db option {db_write_buffer_size, INT}
- fix: cache usahe, correctly reuse the cache among instances
- fix: options parsing, reuse code where we can and correctly
handle db optinos

*** BREAKING CHANGE ***

The following cache functions has been removed:

-  new_lru_cache/1,
-  new_clock_cache/1,
-  get_usage/1,
-  get_pinned_usage/1,
-  set_capacity/2,
-  get_capacity/1

instead use the new block_cache function to change the
size of the shared cache. A new api to setup different caches
will come in the next version.

The following functions has been removed:

- default_env/0,
- mem_env/0,
- set_background_threads/2, set_background_threads/3,
- destroy_env/1]).

For now it's not possible to create a shared environment. also
the {in_memory, true} setting has been removed.

To set a memory environement use the option {env, memenv}.


erlang-rocksdb 0.11.0, released on 2017/07/29
=================================================

- add rocksdb:get_snapshot_sequence/1

erlang-rocksdb 0.10.0, released on 2017/07/28
=================================================

- bump to rocksdb 5.7.2
- add: rocksdb:delete_range/{4,5}
- add: support for the backup api
- add: rocksdb:destroy_column_family/1
- proper fix to handle an iterator with column family issue


erlang-rocksdb 0.9.1, released on 2017/07/26
============================================

- fix iterator with column familly issue
- fix mutex usage igit push --tagsn the db object

erlang-rocksdb 0.9.0, released on 2017/05/31
============================================

- bump to rocksdb 5.4.5
- remove `disable_data_sync` db option, optimisations removed in rocksdb
- remove `timeout_hint_us` db option, was useless since 2 years
- remove `verify_checksums_in_compaction` db option. it's always done.
- remove `skip_table_builder_flush` db option
- remove `allow_os_buffer` db option
- add `{seek_for_prev, Prev}` db option
- allows to fold a column familly

erlang-rocksdb 0.8.2, released on 2017/05/17
============================================

- fix: fix default_env/0 & mem_env/0 spec

erlang-rocksdb 0.8.1, released on 2017/05/17
============================================

- fix: use an uint64 to set the capacity of LRU or CLOCK caches.

erlang-rocksdb 0.8.0, released on 2017/05/17
============================================

- replace custom pool by dirty-nif calls
- allows a cache to be shared between databases (option `block_cache` from the block options)
- allows an environment to be set and shared across databases (option `env`)
- add support of batch operations, allows you to incrementatly update it in memory
- add support for transaction log operations (riteration and replication)
